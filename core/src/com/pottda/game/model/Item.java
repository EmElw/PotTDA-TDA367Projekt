package com.pottda.game.model;

import javax.vecmath.Point2i;
import java.util.ArrayList;
import java.util.EnumMap;
import java.util.List;
import java.util.Map;

/**
 * A basic Item, heavily modifiable based on properties
 */
public abstract class Item extends ProjectileListenerAdapter {
    /**
     * An AttackItem is a starting point and cannot be chained into
     */
    protected boolean isPrimaryAttack;
    /**
     * Secondary attacks have an attack function but are not
     * directly called from the Inventory to attack. Rather,
     * these are triggered attacks that handle their own
     * attacks on certain events
     */
    protected boolean isSecondaryAttack;
    /**
     * A ProjectileModifier modifies projectiles and needs to be attached as a ProjectileListener
     */
    protected boolean isProjectileModifier;
    /**
     * List of points relative to origin 0,0 of the item's positions
     */
    protected List<Point2i> basePositions;
    /**
     * List of points where the item will look for its output paths
     * (Generally only one)
     */
    protected List<Point2i> baseOutputs;
    /**
     * A List to the items output items, generated by the Inventory when it compiles
     */
    protected List<Item> outputItems;
    /**
     * The chance for an item to drop when the inventory containing it is destroyed
     * <p>
     * 1 = always dropped, 0 (default) = never dropped
     */
    protected float dropRate;

    protected String name;

    // -------------------------------------------------

    /**
     * Data structure containing values mapped to enums
     */
    protected Map<Stat, Double> statMap;
    /**
     * Direction of the item in terms of number pi/2 rotations
     */
    public int orientation;
    /**
     * X-orientation within its inventory
     */
    public int x;

    /**
     * Y-orientation within its inventory
     */
    public int y;

    /**
     * Pseudo-constructor, called if instantiated without constructor (probably really bad practice)
     */
    public void init() {
        basePositions = new ArrayList<>();
        baseOutputs = new ArrayList<>();
        statMap = new EnumMap<>(Stat.class);
        outputItems = new ArrayList<>();
        // Set default properties
        isPrimaryAttack = false;
        isProjectileModifier = false;
        isSecondaryAttack = false;
        dropRate = 0;

        // Set properties based on dynamic type
        initDynamic();
    }

    /**
     * Returns a list of {@code Integer}, where each corresponds to a space where this item is.
     * <p>
     * The function sequences a coordinate grid with width {@code w} into a single number so
     * that i.e. (1,2) with w = 5 is equivalent to 1 + (2*5) = 11
     *
     * @param w the width of the grid
     * @return a {@code List<Integer>}
     */
    List<Integer> getPositionsAsIntegers(int w) {
        List<Integer> list = new ArrayList<>();

        for (Point2i p : basePositions) {
            Point2i rotatedPoint = rotate(p.x, p.y, orientation);
            int v = (rotatedPoint.x + x) +    // Add x to convert to absolute coordinate in Inventory
                    (rotatedPoint.y + y) * w;     // Multiply to add the whole number of rows
            list.add(v);
        }

        return list;
    }

    /**
     * Returns a list of {@code Integer}, where each corresponds to a space where the item's
     * output is.
     * <p>
     * The function sequences a coordinate grid with width {@code w} into a single number so
     * that i.e. (1,2) with w = 5 is equivalent to 1 + (2*5) = 11
     *
     * @param w the width of the grid
     * @return a {@code List<Integer>}
     */
    List<Integer> getOutputAsInteger(int w) {
        List<Integer> list = new ArrayList<>();

        for (Point2i p : baseOutputs) {
            Point2i rotatedPoint = rotate(p.x, p.y, orientation);
            int v = (rotatedPoint.x + x) +    // Add x to convert to absolute coordinate in Inventory
                    (rotatedPoint.y + y) * w;     // Multiply to add the whole number of rows
            list.add(v);
        }

        return list;
    }

    double getStat(Stat stat) {
        return statMap.containsKey(stat) ? statMap.get(stat) : 0;
    }

    /**
     * Is called at the end of init(), meaning it overrides the
     * default properties if wanted
     */
    protected abstract void initDynamic();

    /**
     * Basic iteration implementation, can be changed to
     * accomodate different behaviours such as toggling
     * outputs, no output, conditional outputs etc.
     *
     * @return an {@code Item}
     */
    protected Item getNext() {
        return outputItems.get(0);
    }

    @Override
    public String toString() {
        return this.getClass().toString();
    }

    /**
     * Call to randomly determine if this item should be dropped
     *
     * @param rateMultiplier a factor that alters the dropRate
     * @return true if the item should be dropped
     */
    boolean drop(float rateMultiplier) {
        // TODO rateMultiplier is not used
        return Math.random() < dropRate;
    }

    /**
     * Returns a copy of a rotated 2D point by n * pi/2 rad or n * 90 degrees around (0,0)
     * <p>
     * Home-brew rotation function (because vecmath doesn't support 2D matrices?)
     *
     * @param x the x-coordinate of the point
     * @param y the y-coordinate of the point
     * @param n the rotation, expressed as n multiples of pi/2 rad
     * @return {@code int[]} of size 2
     */
    private static Point2i rotate(int x, int y, int n) {
        Point2i returnValue = new Point2i(x, y);
        returnValue.x = a[n] * x + b[n] * y;
        returnValue.y = c[n] * x + a[n] * y;
        return returnValue;
    }

    /**
     * Rotation matrix for r * pi/2
     * R = [ a[r] b[r] ; c[r] a[r]]
     */
    private static final int[] a = {1, 0, -1, 0};
    private static final int[] b = {0, -1, 0, 1};
    private static final int[] c = {0, 1, 0, -1};

}
